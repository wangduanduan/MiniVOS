#  MiniVOS, a minimal SIP server, Build on OpenSIPS.
#  vresion: 0.0.1
# build at: Sun Aug  3 13:51:01 CST 2025

#debug_mode=yes
log_level=3
xlog_level=3
stderror_enabled=yes
syslog_enabled=yes
syslog_facility=LOG_LOCAL0
syslog_name="openvos-init 0.0.1"


alias=udp:minivos.local
alias=tcp:minivos.local
alias=ws:minivos.local

disable_stateless_fwd=yes

event_pkg_threshold=90
event_shm_threshold=90
exec_dns_threshold = 60000
exec_msg_threshold = 60000


tcp_keepalive = 1
tcp_keepcount = 5
tcp_no_new_conn_bflag = TCP_NO_CONNECT


udp_workers=4

user_agent_header="User-Agent: OpenVOS my_version"
server_header="Server: OpenVOS my_version"
server_signature=no

socket=udp:192.168.1.1:5060 as 127.0.0.1:5060
socket=tcp:192.168.1.1:5060 as 127.0.0.1:5060
socket=ws:192.168.1.1:5062 as 127.0.0.1:5062

# ,ENV_PUBLIC_IP,

mpath="/usr/local/lib64/opensips/modules/"

loadmodule "signaling.so"
loadmodule "sl.so"

loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/run/opensips/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
#modparam("registrar", "max_contacts", 10)
modparam("registrar", "received_avp", "$avp(rcv)")
modparam("registrar", "received_param", "rcv")
modparam("registrar", "default_expires", 60)
modparam("registrar", "min_expires", 30)
modparam("registrar", "max_expires", 90)
modparam("registrar", "tcp_persistent_flag", "TCP_PERSIST_DURATION")


loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 0)
modparam("nathelper", "received_avp", "$avp(rcv)")

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
loadmodule "proto_ws.so"

loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "ENV_RTP_SOCKET")


#
route[r_pre_check] {
	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"E_LOOPED");
		exit;
	}

	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply(503, "E_NOT_SUPPORT");
		exit;
	}

    if ($socket_in(proto) == "ws") {
        if (!is_myself("$rd")) {
            xlog("L_ERR", "$socket_in $ci $rm/$rs $route.name/$cfg_line $ru $fu>$tu $ua ::  BAN THIS IP <$si> ");
            exit;
        }

        setbflag("TCP_NO_CONNECT");
    }

    if ($socket_in(proto) == "tcp") {
        xlog("L_ERR", "$socket_in $ci $rm/$rs $route.name/$cfg_line $ru $fu>$tu $ua ::  BAN THIS IP <$si> ");
        exit;
    }
}

route[r_seq_request] {
    # handle hop-by-hop ACK (no routing required)
    if ( is_method("ACK") && t_check_trans() ) {
        t_relay();
        exit;
    }

    # sequential request within a dialog should
    # take the path determined by record-routing
    if ( !loose_route() ) {
        # we do record-routing for all our traffic, so we should not
        # receive any sequential requests without Route hdr.
        send_reply(404,"E_NOT_FOUND");
        exit;
    }

    if (is_method("BYE")) {
        # do accounting even if the transaction fails
        # do_accounting("log","failed");
    }

    # route it out to whatever destination was set by loose_route()
    # in $du (destination URI).
    route(relay);
    exit;
}


route{
    xlog("L_INFO", "$socket_in $ci $rm/$rs $route.name/$cfg_line $ru $fu>$tu $ua ::  new request $socket_in(proto) $hdr(Contact)");

    route(r_pre_check);

	if (has_totag()) {
        route(r_seq_request);
	}

	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if ( !(is_method("REGISTER")) ) {
		
		if (is_myself("$fd")) {
					
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_myself("$rd")) {
				send_reply(403,"E_FORBIDDEN");
				xlog("L_ERR", "$socket_in $ci $rm/$rs $route.name/$cfg_line $ru $fu>$tu $ua ::  BAN THIS IP <$si> ");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_INFO", "$socket_in $ci $rm/$rs $route.name/$cfg_line $ru $fu>$tu $ua ::  preload route");

		if (!is_method("ACK"))
			send_reply(403,"E_FORBIDDEN");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	if (is_method("REGISTER")) {
		# store the registration and generate a SIP reply
        fix_nated_register();

		if (!save("location"))
			xlog("failed to register AoR $tu\n");

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","method-filtering")) {
		t_reply(404, "Not Found");
		exit;
	}

	route(relay);
}
route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	exit;
}

branch_route[per_branch_ops] {
	xlog("new branch at $ru");

    if (has_body("application/sdp")){
        $var(rtpengine_offer_flags)= "rtcp-mux-offer RTP/SAVPF SDES-off ICE=force media-address=127.0.0.1";
        rtpengine_offer("$var(rtpengine_offer_flags)");
    }
    
}

onreply_route[handle_nat] {
	xlog("incoming reply\n");

    if (has_body("application/sdp")){
        $var(rtpengine_answer_flags) = "rtcp-mux-demux RTP/AVP replace-session-connection replace-origin ICE=remove media-address=192.168.1.1";
        rtpengine_answer("$var(rtpengine_answer_flags)");
    }
}
failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}

	
}
